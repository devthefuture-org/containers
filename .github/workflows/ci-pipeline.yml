name: Containers PR CI

on:
  pull_request:
    paths:
      - "containers/openami/**"
      - "containers/scripts/**"
      - "containers/.github/workflows/ci-pipeline.yml"

permissions:
  contents: read

concurrency:
  group: containers-ci-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect changed images and prepare matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.out.outputs.matrix }}
      result: ${{ steps.out.outputs.result }}
      dockerfiles: ${{ steps.out.outputs.dockerfiles }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: out
        name: Compute build matrix
        shell: bash
        run: |
          set -euo pipefail
          PR_NUM="${{ github.event.pull_request.number }}"

          # Get file list for this PR via API to avoid git merge-base issues
          files="$(gh api --paginate "/repos/${GITHUB_REPOSITORY}/pulls/${PR_NUM}/files" | jq -r '.[].filename')"

          # Collect changed images under containers/openami/<image>/
          mapfile -t changed_imgs < <(echo "$files" | grep -E '^containers/openami/[^/]+/' | cut -d/ -f1-3 | sort -u || true)
          mapfile -t changed_dockerfiles < <(echo "$files" | grep -E '^containers/openami/.*/Dockerfile$' | sort -u || true)

          if [[ ${#changed_imgs[@]} -eq 0 ]]; then
            echo "No image changes detected, skip."
            echo "result=skip" >> "$GITHUB_OUTPUT"
            echo 'matrix={"include":[]}' >> "$GITHUB_OUTPUT"
            echo 'dockerfiles=[]' >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # For each changed image, pick the first non-comment tag from tags.txt and resolve context
          inc='[]'
          for imgdir in "${changed_imgs[@]}"; do
            name="$(basename "$imgdir")"
            base_dir="containers/openami/${name}"
            tfile="${base_dir}/tags.txt"
            if [[ ! -f "$tfile" ]]; then
              echo "ERROR: Missing tags.txt for image ${name}"
              exit 1
            fi
            # First non-empty, non-comment line
            line="$(grep -Ev '^[[:space:]]*#|^[[:space:]]*$' "$tfile" | head -n1 || true)"
            if [[ -z "$line" ]]; then
              echo "ERROR: Empty tags.txt for image ${name}"
              exit 1
            fi
            tag="$(awk '{print $1}' <<< "$line")"
            rel="$(awk 'NF>1{print $2}' <<< "$line")"

            if [[ -z "$rel" ]]; then
              # Simple inference: major.minor + debian-12 (aligns with discover script heuristics)
              base="$(sed -E 's/^([0-9]+)\.([0-9]+).*/\1.\2/' <<< "$tag")"
              rel="${base}/debian-12"
            fi

            context="${base_dir}/${rel}"
            dfile="${context}/Dockerfile"
            if [[ ! -f "$dfile" ]]; then
              echo "ERROR: Resolved Dockerfile not found for ${name}:${tag} at ${dfile}"
              exit 1
            fi

            entry=$(jq -c -n \
              --arg name "$name" \
              --arg tag "$tag" \
              --arg context "$context" \
              --arg dockerfile "$dfile" \
              '{name:$name, tag:$tag, context:$context, dockerfile:$dockerfile}')
            inc=$(jq -c --argjson e "$entry" '. + [$e]' <<< "$inc")
          done

          echo "result=ok" >> "$GITHUB_OUTPUT"
          echo "matrix=$(jq -c -n --argjson inc "$inc" '{include:$inc}')" >> "$GITHUB_OUTPUT"
          echo "dockerfiles=$(printf "%s\n" "${changed_dockerfiles[@]}" | jq -R . | jq -cs .)" >> "$GITHUB_OUTPUT"

  hadolint:
    name: Dockerfile lint
    if: needs.changes.outputs.result == 'ok'
    runs-on: ubuntu-latest
    needs: changes
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          recursive: true
          path: .

  build-test:
    name: Test build (amd64, no push)
    if: needs.changes.outputs.result == 'ok'
    needs: changes
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.changes.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Build image (load locally)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: false
          load: true
          platforms: linux/amd64
          tags: pr-test/${{ matrix.name }}:${{ github.sha }}
          build-args: |
            TAG=${{ matrix.tag }}

      - name: Trivy scan (warn only)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: pr-test/${{ matrix.name }}:${{ github.sha }}
          format: table
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          vuln-type: os,library
          exit-code: "0"
