name: Mirror Bitnami images to GHCR

on:
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * *" # nightly

permissions:
  contents: read
  packages: write

jobs:
  mirror:
    name: Mirror docker.io/bitnami -> ghcr.io/devthefuture-org/containers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure images list exists
        shell: bash
        run: |
          set -euo pipefail
          if [[ ! -f containers/images.txt ]]; then
            echo "containers/images.txt not found. Please generate it from charts repo and commit."
            exit 1
          fi
          echo "Images to mirror: $(wc -l < containers/images.txt)"
          sed -n '1,30p' containers/images.txt || true

      - name: Login to GHCR
        env:
          GH_USER: ${{ github.actor }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          echo "${GH_TOKEN}" | docker login ghcr.io -u "${GH_USER}" --password-stdin

      - name: Optional login to Docker Hub (to avoid rate limits)
        if: ${{ secrets.DOCKERHUB_USERNAME != '' && secrets.DOCKERHUB_TOKEN != '' }}
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          echo "${DOCKERHUB_TOKEN}" | docker login docker.io -u "${DOCKERHUB_USERNAME}" --password-stdin

      - name: Mirror images sequentially
        shell: bash
        env:
          GH_NAMESPACE: ghcr.io/devthefuture-org/containers
        run: |
          set -euo pipefail

          mirror_one() {
            local dst="$1"         # ghcr.io/devthefuture-org/containers/<name>:<tag>
            local name_tag="${dst#${GH_NAMESPACE}/}"   # <name>:<tag>
            local src="docker.io/bitnami/${name_tag}"  # docker.io/bitnami/<name>:<tag>

            echo "::group::Mirroring ${src} -> ${dst}"
            # Pull, retag, push
            if ! docker pull "${src}"; then
              echo "WARN: failed to pull ${src}, skipping"
              echo "::endgroup::"
              return 0
            fi
            docker tag "${src}" "${dst}"
            docker push "${dst}"
            echo "::endgroup::"
          }

          # Loop images list
          while IFS= read -r dst; do
            [[ -z "$dst" ]] && continue
            [[ "$dst" =~ ^# ]] && continue
            mirror_one "$dst"
          done < containers/images.txt
